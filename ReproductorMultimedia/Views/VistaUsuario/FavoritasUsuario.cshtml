@model IEnumerable<Logica.ViewModels.CancionesFavoritasViewModel>
@using Logica.Managers

@{
    ViewData["Title"] = "FavoritasUsuario";
}
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
<!--He añadido una nueva libreria llamada MediaElement.js para la personalización de la barra de reproducción y un mejor manejo-->
<!-- CSS de MediaElement.js -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/mediaelement/4.2.16/mediaelementplayer.min.css">

<!-- JS de MediaElement.js -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/mediaelement/4.2.16/mediaelement-and-player.min.js"></script>
<h1>Favoritas</h1>
<h1>Usuario: @ViewBag.NombreUsuario</h1>


<table class="table">
    <thead>
        <tr>
            <th>
                Carátula
            </th>
            <th>Reproducir</th>

            <th>
                @Html.DisplayNameFor(model => model.Cancion.Titulo)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Cancion.Artista)
            </th>

            <th>
                @Html.DisplayNameFor(model => model.Cancion.Album)
            </th>
            <th>
                <i class="fa-solid fa-clock"></i>
            </th>

            <th>
                Fecha en la que se añadió
            </th>

            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    <div class="disco" id="disco-@item.idCancion">
                        <img src="@item.Cancion.RutaCaratulaAlbum" alt="Carátula" />
                    </div>
                </td>
                <td>
                    <audio controls id="audio-@item.idCancion">
                        <source src="@item.Cancion.RutaArchivo" type="audio/mpeg" />
                        Tu navegador no soporta la reproducción de audio.
                    </audio>
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Cancion.Titulo)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Cancion.Artista)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Cancion.Album)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Cancion.Duracion)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.fecharAnadidaFavorita)
                </td>

                <td>
                    <button class="like @(item.Cancion.UsuarioDioLike ? "like-activo" : "")"
                            data-idcancion="@item.idCancion"
                            onclick="toggleLike(this)"
                            style="background: none; border: none;">
                        <i class="fa-solid fa-heart"></i>
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>
<style>
    .table {
        background-color: #f8f9fa;
        border-radius: 8px;
    }

    .icono {
        margin: 0 10px;
        font-size: 22px;
        text-decoration: none;
        transition: transform 0.2s ease;
        display: inline-block;
    }

        .icono:hover {
            transform: scale(1.2);
        }

    .like {
        margin: 0 10px;
        font-size: 22px;
        text-decoration: none;
        transition: transform 0.2s ease;
        display: inline-block;
        color: grey;
    }

        .like:hover {
            transform: scale(1.2);
            color: #C73636;
        }

    .like-activo i {
        color: #C73636;
    }

    .disco {
        width: 120px;
        height: 120px;
        border-radius: 50%;
        background: radial-gradient(circle, #333 30%, #111 70%);
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: 0 0 10px rgba(0,0,0,0.4);
        position: relative;
    }

        .disco img {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            object-fit: cover;
            z-index: 1;
        }

    .mejs__container {
        background-color: #171717;
        border: 1px solid #ddd;
        border-radius: 6px;
    }

    .mejs__time-current {
        background: #C73636 !important;
    }

    .mejs__time-loaded {
        background: #bbb;
    }

    .mejs__button > button {
        color: #C73636;
    }


</style>
<!-- #endregion -->
<!-- #region JavaScript -->

<form id="tokenForm" method="post">
    @Html.AntiForgeryToken()
</form>
@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <script>
        // Función global para alternar likes
        function toggleLike(button) {
            if (button.disabled) return; // Evita clics múltiples

            button.disabled = true;

            const idCancion = parseInt(button.getAttribute('data-idcancion'));
            const contador = document.getElementById(`contadorLikes-${idCancion}`);

            fetch('/VistaUsuario/LikeAlternar', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(idCancion)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    button.classList.toggle('like-activo', data.dioLike);
                    if (contador) {
                        contador.textContent = data.likesTotales;
                    }
                } else {
                    alert(data.mensaje);
                }
            })
            .catch(error => {
                console.error("Error al alternar like:", error);
            })
            .finally(() => {
                button.disabled = false; // Reactiva el botón
            });
        }

        // Inicializa MediaElement.js
        document.addEventListener('DOMContentLoaded', function () {
            const players = document.querySelectorAll('audio');
            players.forEach(function (player) {
                new MediaElementPlayer(player, {
                    features: ['playpause', 'progress', 'current', 'duration', 'volume'],
                    audioVolume: 'horizontal'
                });
            });

            // Animación de discos y conteo de reproducciones
            const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
            const token = tokenInput ? tokenInput.value : '';

            const actualizarReproduccionesUrl = '@Url.Action("ActualizarReproducciones", "Canciones")';

            document.querySelectorAll('audio').forEach(audio => {
                const id = audio.id.split('-')[1];
                const disco = document.getElementById('disco-' + id);

                if (!disco) return;


                let reproduccionContada = false;

                audio.addEventListener('playing', () => {
                    disco.classList.add('girando');

                    if (!reproduccionContada) {
                        reproduccionContada = true;

                        const formData = new FormData();
                        formData.append('__RequestVerificationToken', token);
                        formData.append('id', id);

                        fetch(actualizarReproduccionesUrl, {
                        method: 'POST',
                        body: formData,
                        credentials: 'same-origin'
                        })
                        .then(res => res.json())
                        .then(data => {
                            if (data.success) {
                                const contador = document.querySelector(`#reproducciones-${data.idCancion}`);
                                if (contador) {
                                    contador.textContent = data.reproduccionesTotales;
                                }
                            } else {
                                console.error('❌ Error en el servidor:', data.mensaje);
                            }
                        })
                        .catch(err => {
                            console.error('❌ Error en fetch:', err);
                        });

                    }
                });

                audio.addEventListener('pause', () => {
                    disco.classList.remove('girando');
                });

                audio.addEventListener('ended', () => {
                    disco.classList.remove('girando');
                    reproduccionContada = false; // Permitir contar una nueva reproducción si se vuelve a reproducir desde el principio
                });
            });
        });
    </script>
}
